// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 5ab024dbdcf6dbc76144922afe0a56c71a6e79ac

import {ServiceClient} from '@grpc/grpc-js/build/src/make-client'
import {ClientDuplexStream, ClientReadableStream} from '@grpc/grpc-js/build/src/call'
import * as grpc from '@grpc/grpc-js'
import {EventEmitter} from 'events'
import * as fido2 from './fido2'
import {dummyLogger, Logger} from 'ts-log'

export type RPCError = {
  name: string
  message: string
  code: number
  details: string
}

export class FIDO2Service extends EventEmitter {
  serviceFn: () => ServiceClient
  client?: ServiceClient
  log: Logger = dummyLogger
  
  constructor(serviceFn: () => ServiceClient) {
    super()
    this.serviceFn = serviceFn
  }

  service(): ServiceClient {
    if (!this.client) {
      this.client = this.serviceFn()
    }
    return this.client
  }

  emitError(err: RPCError) {
    switch (err.code) {
      case grpc.status.PERMISSION_DENIED:
      case grpc.status.UNAUTHENTICATED:
        this.emit('unauthenticated', err)
        break
      case grpc.status.UNAVAILABLE:
        this.emit('unavailable', err)
        break
      default:
        this.emit('error', err)
        break
	}
  }

  devices(req: fido2.DevicesRequest): Promise<fido2.DevicesResponse> {
    return new Promise<fido2.DevicesResponse>((resolve, reject) => {
      this.log.info('devices')
      this.service().devices(req, (err: RPCError, resp: fido2.DevicesResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  deviceInfo(req: fido2.DeviceInfoRequest): Promise<fido2.DeviceInfoResponse> {
    return new Promise<fido2.DeviceInfoResponse>((resolve, reject) => {
      this.log.info('deviceInfo')
      this.service().deviceInfo(req, (err: RPCError, resp: fido2.DeviceInfoResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  deviceType(req: fido2.DeviceTypeRequest): Promise<fido2.DeviceTypeResponse> {
    return new Promise<fido2.DeviceTypeResponse>((resolve, reject) => {
      this.log.info('deviceType')
      this.service().deviceType(req, (err: RPCError, resp: fido2.DeviceTypeResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  makeCredential(req: fido2.MakeCredentialRequest): Promise<fido2.MakeCredentialResponse> {
    return new Promise<fido2.MakeCredentialResponse>((resolve, reject) => {
      this.log.info('makeCredential')
      this.service().makeCredential(req, (err: RPCError, resp: fido2.MakeCredentialResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  setPIN(req: fido2.SetPINRequest): Promise<fido2.SetPINResponse> {
    return new Promise<fido2.SetPINResponse>((resolve, reject) => {
      this.log.info('setPIN')
      this.service().setPIN(req, (err: RPCError, resp: fido2.SetPINResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  reset(req: fido2.ResetRequest): Promise<fido2.ResetResponse> {
    return new Promise<fido2.ResetResponse>((resolve, reject) => {
      this.log.info('reset')
      this.service().reset(req, (err: RPCError, resp: fido2.ResetResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  retryCount(req: fido2.RetryCountRequest): Promise<fido2.RetryCountResponse> {
    return new Promise<fido2.RetryCountResponse>((resolve, reject) => {
      this.log.info('retryCount')
      this.service().retryCount(req, (err: RPCError, resp: fido2.RetryCountResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  assertion(req: fido2.AssertionRequest): Promise<fido2.AssertionResponse> {
    return new Promise<fido2.AssertionResponse>((resolve, reject) => {
      this.log.info('assertion')
      this.service().assertion(req, (err: RPCError, resp: fido2.AssertionResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  credentialsInfo(req: fido2.CredentialsInfoRequest): Promise<fido2.CredentialsInfoResponse> {
    return new Promise<fido2.CredentialsInfoResponse>((resolve, reject) => {
      this.log.info('credentialsInfo')
      this.service().credentialsInfo(req, (err: RPCError, resp: fido2.CredentialsInfoResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  credentials(req: fido2.CredentialsRequest): Promise<fido2.CredentialsResponse> {
    return new Promise<fido2.CredentialsResponse>((resolve, reject) => {
      this.log.info('credentials')
      this.service().credentials(req, (err: RPCError, resp: fido2.CredentialsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  relyingParties(req: fido2.RelyingPartiesRequest): Promise<fido2.RelyingPartiesResponse> {
    return new Promise<fido2.RelyingPartiesResponse>((resolve, reject) => {
      this.log.info('relyingParties')
      this.service().relyingParties(req, (err: RPCError, resp: fido2.RelyingPartiesResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  generateHMACSecret(req: fido2.GenerateHMACSecretRequest): Promise<fido2.GenerateHMACSecretResponse> {
    return new Promise<fido2.GenerateHMACSecretResponse>((resolve, reject) => {
      this.log.info('generateHMACSecret')
      this.service().generateHMACSecret(req, (err: RPCError, resp: fido2.GenerateHMACSecretResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  hmacSecret(req: fido2.HMACSecretRequest): Promise<fido2.HMACSecretResponse> {
    return new Promise<fido2.HMACSecretResponse>((resolve, reject) => {
      this.log.info('hmacSecret')
      this.service().hmacSecret(req, (err: RPCError, resp: fido2.HMACSecretResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }
}
