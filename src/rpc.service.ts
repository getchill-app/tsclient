// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: c0de9ebec4cc7a32f29cbf894f0e2c44e2a39238

import {ServiceClient} from '@grpc/grpc-js/build/src/make-client'
import {ClientDuplexStream, ClientReadableStream} from '@grpc/grpc-js/build/src/call'
import * as grpc from '@grpc/grpc-js'
import {EventEmitter} from 'events'
import * as service from './rpc'
import {dummyLogger, Logger} from 'ts-log'

export type RPCError = {
  name: string
  message: string
  code: number
  details: string
}

export class RPCService extends EventEmitter {
  serviceFn: () => ServiceClient
  client?: ServiceClient
  log: Logger = dummyLogger
  
  constructor(serviceFn: () => ServiceClient) {
    super()
    this.serviceFn = serviceFn
  }

  service(): ServiceClient {
    if (!this.client) {
      this.client = this.serviceFn()
    }
    return this.client
  }

  emitError(err: RPCError) {
    switch (err.code) {
      case grpc.status.PERMISSION_DENIED:
      case grpc.status.UNAUTHENTICATED:
        this.emit('unauthenticated', err)
        break
      case grpc.status.UNAVAILABLE:
        this.emit('unavailable', err)
        break
      default:
        this.emit('error', err)
        break
	}
  }

  accountCreate(req: service.AccountCreateRequest): Promise<service.AccountCreateResponse> {
    return new Promise<service.AccountCreateResponse>((resolve, reject) => {
      this.log.info('accountCreate')
      this.service().accountCreate(req, (err: RPCError, resp: service.AccountCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  accountVerify(req: service.AccountVerifyRequest): Promise<service.AccountVerifyResponse> {
    return new Promise<service.AccountVerifyResponse>((resolve, reject) => {
      this.log.info('accountVerify')
      this.service().accountVerify(req, (err: RPCError, resp: service.AccountVerifyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  accountStatus(req: service.AccountStatusRequest): Promise<service.AccountStatusResponse> {
    return new Promise<service.AccountStatusResponse>((resolve, reject) => {
      this.log.info('accountStatus')
      this.service().accountStatus(req, (err: RPCError, resp: service.AccountStatusResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authUnlock(req: service.AuthUnlockRequest): Promise<service.AuthUnlockResponse> {
    return new Promise<service.AuthUnlockResponse>((resolve, reject) => {
      this.log.info('authUnlock')
      this.service().authUnlock(req, (err: RPCError, resp: service.AuthUnlockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authLock(req: service.AuthLockRequest): Promise<service.AuthLockResponse> {
    return new Promise<service.AuthLockResponse>((resolve, reject) => {
      this.log.info('authLock')
      this.service().authLock(req, (err: RPCError, resp: service.AuthLockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  rand(req: service.RandRequest): Promise<service.RandResponse> {
    return new Promise<service.RandResponse>((resolve, reject) => {
      this.log.info('rand')
      this.service().rand(req, (err: RPCError, resp: service.RandResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  randPassword(req: service.RandPasswordRequest): Promise<service.RandPasswordResponse> {
    return new Promise<service.RandPasswordResponse>((resolve, reject) => {
      this.log.info('randPassword')
      this.service().randPassword(req, (err: RPCError, resp: service.RandPasswordResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyGenerate(req: service.KeyGenerateRequest): Promise<service.KeyGenerateResponse> {
    return new Promise<service.KeyGenerateResponse>((resolve, reject) => {
      this.log.info('keyGenerate')
      this.service().keyGenerate(req, (err: RPCError, resp: service.KeyGenerateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keys(req: service.KeysRequest): Promise<service.KeysResponse> {
    return new Promise<service.KeysResponse>((resolve, reject) => {
      this.log.info('keys')
      this.service().keys(req, (err: RPCError, resp: service.KeysResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  key(req: service.KeyRequest): Promise<service.KeyResponse> {
    return new Promise<service.KeyResponse>((resolve, reject) => {
      this.log.info('key')
      this.service().key(req, (err: RPCError, resp: service.KeyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyImport(req: service.KeyImportRequest): Promise<service.KeyImportResponse> {
    return new Promise<service.KeyImportResponse>((resolve, reject) => {
      this.log.info('keyImport')
      this.service().keyImport(req, (err: RPCError, resp: service.KeyImportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyExport(req: service.KeyExportRequest): Promise<service.KeyExportResponse> {
    return new Promise<service.KeyExportResponse>((resolve, reject) => {
      this.log.info('keyExport')
      this.service().keyExport(req, (err: RPCError, resp: service.KeyExportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyRemove(req: service.KeyRemoveRequest): Promise<service.KeyRemoveResponse> {
    return new Promise<service.KeyRemoveResponse>((resolve, reject) => {
      this.log.info('keyRemove')
      this.service().keyRemove(req, (err: RPCError, resp: service.KeyRemoveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keySearch(req: service.KeySearchRequest): Promise<service.KeySearchResponse> {
    return new Promise<service.KeySearchResponse>((resolve, reject) => {
      this.log.info('keySearch')
      this.service().keySearch(req, (err: RPCError, resp: service.KeySearchResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  user(req: service.UserRequest): Promise<service.UserResponse> {
    return new Promise<service.UserResponse>((resolve, reject) => {
      this.log.info('user')
      this.service().user(req, (err: RPCError, resp: service.UserResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSearch(req: service.UserSearchRequest): Promise<service.UserSearchResponse> {
    return new Promise<service.UserSearchResponse>((resolve, reject) => {
      this.log.info('userSearch')
      this.service().userSearch(req, (err: RPCError, resp: service.UserSearchResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userService(req: service.UserServiceRequest): Promise<service.UserServiceResponse> {
    return new Promise<service.UserServiceResponse>((resolve, reject) => {
      this.log.info('userService')
      this.service().userService(req, (err: RPCError, resp: service.UserServiceResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSign(req: service.UserSignRequest): Promise<service.UserSignResponse> {
    return new Promise<service.UserSignResponse>((resolve, reject) => {
      this.log.info('userSign')
      this.service().userSign(req, (err: RPCError, resp: service.UserSignResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userAdd(req: service.UserAddRequest): Promise<service.UserAddResponse> {
    return new Promise<service.UserAddResponse>((resolve, reject) => {
      this.log.info('userAdd')
      this.service().userAdd(req, (err: RPCError, resp: service.UserAddResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  pull(req: service.PullRequest): Promise<service.PullResponse> {
    return new Promise<service.PullResponse>((resolve, reject) => {
      this.log.info('pull')
      this.service().pull(req, (err: RPCError, resp: service.PullResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  sigchain(req: service.SigchainRequest): Promise<service.SigchainResponse> {
    return new Promise<service.SigchainResponse>((resolve, reject) => {
      this.log.info('sigchain')
      this.service().sigchain(req, (err: RPCError, resp: service.SigchainResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statement(req: service.StatementRequest): Promise<service.StatementResponse> {
    return new Promise<service.StatementResponse>((resolve, reject) => {
      this.log.info('statement')
      this.service().statement(req, (err: RPCError, resp: service.StatementResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statementCreate(req: service.StatementCreateRequest): Promise<service.StatementCreateResponse> {
    return new Promise<service.StatementCreateResponse>((resolve, reject) => {
      this.log.info('statementCreate')
      this.service().statementCreate(req, (err: RPCError, resp: service.StatementCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statementRevoke(req: service.StatementRevokeRequest): Promise<service.StatementRevokeResponse> {
    return new Promise<service.StatementRevokeResponse>((resolve, reject) => {
      this.log.info('statementRevoke')
      this.service().statementRevoke(req, (err: RPCError, resp: service.StatementRevokeResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channels(req: service.ChannelsRequest): Promise<service.ChannelsResponse> {
    return new Promise<service.ChannelsResponse>((resolve, reject) => {
      this.log.info('channels')
      this.service().channels(req, (err: RPCError, resp: service.ChannelsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelCreate(req: service.ChannelCreateRequest): Promise<service.ChannelCreateResponse> {
    return new Promise<service.ChannelCreateResponse>((resolve, reject) => {
      this.log.info('channelCreate')
      this.service().channelCreate(req, (err: RPCError, resp: service.ChannelCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelInvite(req: service.ChannelInviteRequest): Promise<service.ChannelInviteResponse> {
    return new Promise<service.ChannelInviteResponse>((resolve, reject) => {
      this.log.info('channelInvite')
      this.service().channelInvite(req, (err: RPCError, resp: service.ChannelInviteResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelLeave(req: service.ChannelLeaveRequest): Promise<service.ChannelLeaveResponse> {
    return new Promise<service.ChannelLeaveResponse>((resolve, reject) => {
      this.log.info('channelLeave')
      this.service().channelLeave(req, (err: RPCError, resp: service.ChannelLeaveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelRead(req: service.ChannelReadRequest): Promise<service.ChannelReadResponse> {
    return new Promise<service.ChannelReadResponse>((resolve, reject) => {
      this.log.info('channelRead')
      this.service().channelRead(req, (err: RPCError, resp: service.ChannelReadResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messagePrepare(req: service.MessagePrepareRequest): Promise<service.MessagePrepareResponse> {
    return new Promise<service.MessagePrepareResponse>((resolve, reject) => {
      this.log.info('messagePrepare')
      this.service().messagePrepare(req, (err: RPCError, resp: service.MessagePrepareResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messageCreate(req: service.MessageCreateRequest): Promise<service.MessageCreateResponse> {
    return new Promise<service.MessageCreateResponse>((resolve, reject) => {
      this.log.info('messageCreate')
      this.service().messageCreate(req, (err: RPCError, resp: service.MessageCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messages(req: service.MessagesRequest): Promise<service.MessagesResponse> {
    return new Promise<service.MessagesResponse>((resolve, reject) => {
      this.log.info('messages')
      this.service().messages(req, (err: RPCError, resp: service.MessagesResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  relay(req: service.RelayRequest): ClientReadableStream<service.RelayOutput> {
    this.log.info('relay')
    return this.service().relay(req)
  }

  collections(req: service.CollectionsRequest): Promise<service.CollectionsResponse> {
    return new Promise<service.CollectionsResponse>((resolve, reject) => {
      this.log.info('collections')
      this.service().collections(req, (err: RPCError, resp: service.CollectionsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  documents(req: service.DocumentsRequest): Promise<service.DocumentsResponse> {
    return new Promise<service.DocumentsResponse>((resolve, reject) => {
      this.log.info('documents')
      this.service().documents(req, (err: RPCError, resp: service.DocumentsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  orgKey(req: service.OrgKeyRequest): Promise<service.OrgKeyResponse> {
    return new Promise<service.OrgKeyResponse>((resolve, reject) => {
      this.log.info('orgKey')
      this.service().orgKey(req, (err: RPCError, resp: service.OrgKeyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  orgCreate(req: service.OrgCreateRequest): Promise<service.OrgCreateResponse> {
    return new Promise<service.OrgCreateResponse>((resolve, reject) => {
      this.log.info('orgCreate')
      this.service().orgCreate(req, (err: RPCError, resp: service.OrgCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  orgSign(req: service.OrgSignRequest): Promise<service.OrgSignResponse> {
    return new Promise<service.OrgSignResponse>((resolve, reject) => {
      this.log.info('orgSign')
      this.service().orgSign(req, (err: RPCError, resp: service.OrgSignResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  orgInvites(req: service.OrgInvitesRequest): Promise<service.OrgInvitesResponse> {
    return new Promise<service.OrgInvitesResponse>((resolve, reject) => {
      this.log.info('orgInvites')
      this.service().orgInvites(req, (err: RPCError, resp: service.OrgInvitesResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  orgInviteAccept(req: service.OrgInviteAcceptRequest): Promise<service.OrgInviteAcceptResponse> {
    return new Promise<service.OrgInviteAcceptResponse>((resolve, reject) => {
      this.log.info('orgInviteAccept')
      this.service().orgInviteAccept(req, (err: RPCError, resp: service.OrgInviteAcceptResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }
}
