// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: e798e648faadc50b876320a6418ea89789423cb8

import {ServiceClient} from '@grpc/grpc-js/build/src/make-client'
import {ClientDuplexStream, ClientReadableStream} from '@grpc/grpc-js/build/src/call'
import * as grpc from '@grpc/grpc-js'
import {EventEmitter} from 'events'
import * as service from './rpc'
import {dummyLogger, Logger} from 'ts-log'

export type RPCError = {
  name: string
  message: string
  code: number
  details: string
}

export class RPCService extends EventEmitter {
  serviceFn: () => ServiceClient
  client?: ServiceClient
  log: Logger = dummyLogger
  
  constructor(serviceFn: () => ServiceClient) {
    super()
    this.serviceFn = serviceFn
  }

  service(): ServiceClient {
    if (!this.client) {
      this.client = this.serviceFn()
    }
    return this.client
  }

  emitError(err: RPCError) {
    switch (err.code) {
      case grpc.status.PERMISSION_DENIED:
      case grpc.status.UNAUTHENTICATED:
        this.emit('unauthenticated', err)
        break
      case grpc.status.UNAVAILABLE:
        this.emit('unavailable', err)
        break
      default:
        this.emit('error', err)
        break
	}
  }

  authSetup(req: service.AuthSetupRequest): Promise<service.AuthSetupResponse> {
    return new Promise<service.AuthSetupResponse>((resolve, reject) => {
      this.log.info('authSetup')
      this.service().authSetup(req, (err: RPCError, resp: service.AuthSetupResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authUnlock(req: service.AuthUnlockRequest): Promise<service.AuthUnlockResponse> {
    return new Promise<service.AuthUnlockResponse>((resolve, reject) => {
      this.log.info('authUnlock')
      this.service().authUnlock(req, (err: RPCError, resp: service.AuthUnlockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authLock(req: service.AuthLockRequest): Promise<service.AuthLockResponse> {
    return new Promise<service.AuthLockResponse>((resolve, reject) => {
      this.log.info('authLock')
      this.service().authLock(req, (err: RPCError, resp: service.AuthLockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  runtimeStatus(req: service.RuntimeStatusRequest): Promise<service.RuntimeStatusResponse> {
    return new Promise<service.RuntimeStatusResponse>((resolve, reject) => {
      this.log.info('runtimeStatus')
      this.service().runtimeStatus(req, (err: RPCError, resp: service.RuntimeStatusResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyGenerate(req: service.KeyGenerateRequest): Promise<service.KeyGenerateResponse> {
    return new Promise<service.KeyGenerateResponse>((resolve, reject) => {
      this.log.info('keyGenerate')
      this.service().keyGenerate(req, (err: RPCError, resp: service.KeyGenerateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keys(req: service.KeysRequest): Promise<service.KeysResponse> {
    return new Promise<service.KeysResponse>((resolve, reject) => {
      this.log.info('keys')
      this.service().keys(req, (err: RPCError, resp: service.KeysResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  key(req: service.KeyRequest): Promise<service.KeyResponse> {
    return new Promise<service.KeyResponse>((resolve, reject) => {
      this.log.info('key')
      this.service().key(req, (err: RPCError, resp: service.KeyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyImport(req: service.KeyImportRequest): Promise<service.KeyImportResponse> {
    return new Promise<service.KeyImportResponse>((resolve, reject) => {
      this.log.info('keyImport')
      this.service().keyImport(req, (err: RPCError, resp: service.KeyImportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyExport(req: service.KeyExportRequest): Promise<service.KeyExportResponse> {
    return new Promise<service.KeyExportResponse>((resolve, reject) => {
      this.log.info('keyExport')
      this.service().keyExport(req, (err: RPCError, resp: service.KeyExportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyRemove(req: service.KeyRemoveRequest): Promise<service.KeyRemoveResponse> {
    return new Promise<service.KeyRemoveResponse>((resolve, reject) => {
      this.log.info('keyRemove')
      this.service().keyRemove(req, (err: RPCError, resp: service.KeyRemoveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  user(req: service.UserRequest): Promise<service.UserResponse> {
    return new Promise<service.UserResponse>((resolve, reject) => {
      this.log.info('user')
      this.service().user(req, (err: RPCError, resp: service.UserResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSearch(req: service.UserSearchRequest): Promise<service.UserSearchResponse> {
    return new Promise<service.UserSearchResponse>((resolve, reject) => {
      this.log.info('userSearch')
      this.service().userSearch(req, (err: RPCError, resp: service.UserSearchResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userService(req: service.UserServiceRequest): Promise<service.UserServiceResponse> {
    return new Promise<service.UserServiceResponse>((resolve, reject) => {
      this.log.info('userService')
      this.service().userService(req, (err: RPCError, resp: service.UserServiceResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSign(req: service.UserSignRequest): Promise<service.UserSignResponse> {
    return new Promise<service.UserSignResponse>((resolve, reject) => {
      this.log.info('userSign')
      this.service().userSign(req, (err: RPCError, resp: service.UserSignResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userAdd(req: service.UserAddRequest): Promise<service.UserAddResponse> {
    return new Promise<service.UserAddResponse>((resolve, reject) => {
      this.log.info('userAdd')
      this.service().userAdd(req, (err: RPCError, resp: service.UserAddResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }
}
