"use strict";
// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 5ab024dbdcf6dbc76144922afe0a56c71a6e79ac
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FIDO2Service = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const events_1 = require("events");
const ts_log_1 = require("ts-log");
class FIDO2Service extends events_1.EventEmitter {
    constructor(serviceFn) {
        super();
        this.log = ts_log_1.dummyLogger;
        this.serviceFn = serviceFn;
    }
    service() {
        if (!this.client) {
            this.client = this.serviceFn();
        }
        return this.client;
    }
    emitError(err) {
        switch (err.code) {
            case grpc.status.PERMISSION_DENIED:
            case grpc.status.UNAUTHENTICATED:
                this.emit('unauthenticated', err);
                break;
            case grpc.status.UNAVAILABLE:
                this.emit('unavailable', err);
                break;
            default:
                this.emit('error', err);
                break;
        }
    }
    devices(req) {
        return new Promise((resolve, reject) => {
            this.log.info('devices');
            this.service().devices(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    deviceInfo(req) {
        return new Promise((resolve, reject) => {
            this.log.info('deviceInfo');
            this.service().deviceInfo(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    deviceType(req) {
        return new Promise((resolve, reject) => {
            this.log.info('deviceType');
            this.service().deviceType(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    makeCredential(req) {
        return new Promise((resolve, reject) => {
            this.log.info('makeCredential');
            this.service().makeCredential(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    setPIN(req) {
        return new Promise((resolve, reject) => {
            this.log.info('setPIN');
            this.service().setPIN(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    reset(req) {
        return new Promise((resolve, reject) => {
            this.log.info('reset');
            this.service().reset(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    retryCount(req) {
        return new Promise((resolve, reject) => {
            this.log.info('retryCount');
            this.service().retryCount(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    assertion(req) {
        return new Promise((resolve, reject) => {
            this.log.info('assertion');
            this.service().assertion(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    credentialsInfo(req) {
        return new Promise((resolve, reject) => {
            this.log.info('credentialsInfo');
            this.service().credentialsInfo(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    credentials(req) {
        return new Promise((resolve, reject) => {
            this.log.info('credentials');
            this.service().credentials(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    relyingParties(req) {
        return new Promise((resolve, reject) => {
            this.log.info('relyingParties');
            this.service().relyingParties(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    generateHMACSecret(req) {
        return new Promise((resolve, reject) => {
            this.log.info('generateHMACSecret');
            this.service().generateHMACSecret(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    hmacSecret(req) {
        return new Promise((resolve, reject) => {
            this.log.info('hmacSecret');
            this.service().hmacSecret(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
}
exports.FIDO2Service = FIDO2Service;
//# sourceMappingURL=fido2.service.js.map