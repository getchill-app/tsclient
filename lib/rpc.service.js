"use strict";
// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 4f0ab46cf8012088be6131a9affb85d590cc3425
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCService = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const events_1 = require("events");
const ts_log_1 = require("ts-log");
class RPCService extends events_1.EventEmitter {
    constructor(serviceFn) {
        super();
        this.log = ts_log_1.dummyLogger;
        this.serviceFn = serviceFn;
    }
    service() {
        if (!this.client) {
            this.client = this.serviceFn();
        }
        return this.client;
    }
    emitError(err) {
        switch (err.code) {
            case grpc.status.PERMISSION_DENIED:
            case grpc.status.UNAUTHENTICATED:
                this.emit('unauthenticated', err);
                break;
            case grpc.status.UNAVAILABLE:
                this.emit('unavailable', err);
                break;
            default:
                this.emit('error', err);
                break;
        }
    }
    authSetup(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authSetup');
            this.service().authSetup(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authUnlock(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authUnlock');
            this.service().authUnlock(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authLock(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authLock');
            this.service().authLock(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authReset(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authReset');
            this.service().authReset(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    status(req) {
        return new Promise((resolve, reject) => {
            this.log.info('status');
            this.service().status(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keyGenerate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keyGenerate');
            this.service().keyGenerate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keys(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keys');
            this.service().keys(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    key(req) {
        return new Promise((resolve, reject) => {
            this.log.info('key');
            this.service().key(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keyImport(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keyImport');
            this.service().keyImport(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keyExport(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keyExport');
            this.service().keyExport(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keyRemove(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keyRemove');
            this.service().keyRemove(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    keySearch(req) {
        return new Promise((resolve, reject) => {
            this.log.info('keySearch');
            this.service().keySearch(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    user(req) {
        return new Promise((resolve, reject) => {
            this.log.info('user');
            this.service().user(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    userSearch(req) {
        return new Promise((resolve, reject) => {
            this.log.info('userSearch');
            this.service().userSearch(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    userService(req) {
        return new Promise((resolve, reject) => {
            this.log.info('userService');
            this.service().userService(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    userSign(req) {
        return new Promise((resolve, reject) => {
            this.log.info('userSign');
            this.service().userSign(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    userAdd(req) {
        return new Promise((resolve, reject) => {
            this.log.info('userAdd');
            this.service().userAdd(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    rand(req) {
        return new Promise((resolve, reject) => {
            this.log.info('rand');
            this.service().rand(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    randPassword(req) {
        return new Promise((resolve, reject) => {
            this.log.info('randPassword');
            this.service().randPassword(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    pull(req) {
        return new Promise((resolve, reject) => {
            this.log.info('pull');
            this.service().pull(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    sigchain(req) {
        return new Promise((resolve, reject) => {
            this.log.info('sigchain');
            this.service().sigchain(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    statement(req) {
        return new Promise((resolve, reject) => {
            this.log.info('statement');
            this.service().statement(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    statementCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('statementCreate');
            this.service().statementCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    statementRevoke(req) {
        return new Promise((resolve, reject) => {
            this.log.info('statementRevoke');
            this.service().statementRevoke(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authProvision(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authProvision');
            this.service().authProvision(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authDeprovision(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authDeprovision');
            this.service().authDeprovision(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authProvisions(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authProvisions');
            this.service().authProvisions(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    authPasswordChange(req) {
        return new Promise((resolve, reject) => {
            this.log.info('authPasswordChange');
            this.service().authPasswordChange(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    channels(req) {
        return new Promise((resolve, reject) => {
            this.log.info('channels');
            this.service().channels(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    channelCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('channelCreate');
            this.service().channelCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    channelInvite(req) {
        return new Promise((resolve, reject) => {
            this.log.info('channelInvite');
            this.service().channelInvite(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    channelLeave(req) {
        return new Promise((resolve, reject) => {
            this.log.info('channelLeave');
            this.service().channelLeave(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    channelRead(req) {
        return new Promise((resolve, reject) => {
            this.log.info('channelRead');
            this.service().channelRead(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    messagePrepare(req) {
        return new Promise((resolve, reject) => {
            this.log.info('messagePrepare');
            this.service().messagePrepare(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    messageCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('messageCreate');
            this.service().messageCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    messages(req) {
        return new Promise((resolve, reject) => {
            this.log.info('messages');
            this.service().messages(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    relay(req) {
        this.log.info('relay');
        return this.service().relay(req);
    }
    collections(req) {
        return new Promise((resolve, reject) => {
            this.log.info('collections');
            this.service().collections(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    documents(req) {
        return new Promise((resolve, reject) => {
            this.log.info('documents');
            this.service().documents(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
}
exports.RPCService = RPCService;
//# sourceMappingURL=rpc.service.js.map